import org.junit.jupiter.api.Test;

import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;

class DiagonalSudokuTest {
    @Test
    public void random1() {
        int[][] unsolved = new int[][]{
                new int[]{2, 0, 0, 0, 0, 0, 0, 0, 0},
                new int[]{0, 0, 0, 0, 0, 6, 2, 0, 0},
                new int[]{0, 0, 1, 0, 0, 0, 0, 7, 0},
                new int[]{0, 0, 6, 0, 0, 8, 0, 0, 0},
                new int[]{3, 0, 0, 0, 9, 0, 0, 0, 7},
                new int[]{0, 0, 0, 6, 0, 0, 4, 0, 0},
                new int[]{0, 4, 0, 0, 0, 0, 8, 0, 0},
                new int[]{0, 0, 5, 2, 0, 0, 0, 0, 0},
                new int[]{0, 0, 0, 0, 0, 0, 0, 0, 3}
        };

        int[][] solved = {{2, 6, 7, 9, 4, 5, 3, 8, 1},
                {8, 5, 3, 7, 1, 6, 2, 4, 9},
                {4, 9, 1, 8, 2, 3, 5, 7, 6},
                {5, 7, 6, 4, 3, 8, 1, 9, 2},
                {3, 8, 4, 1, 9, 2, 6, 5, 7},
                {1, 2, 9, 6, 5, 7, 4, 3, 8},
                {6, 4, 2, 3, 7, 9, 8, 1, 5},
                {9, 3, 5, 2, 8, 1, 7, 6, 4},
                {7, 1, 8, 5, 6, 4, 9, 2, 3}};
        assertTrue(Arrays.deepEquals(solved, DiagonalSudoku.solve(unsolved)));
    }

    @Test
    public void random2() {
        int[][] unsolved = new int[][]{
                new int[]{0, 3, 0, 8, 4, 0, 0, 0, 0},
                new int[]{0, 0, 0, 9, 0, 0, 0, 0, 0},
                new int[]{0, 0, 5, 0, 0, 0, 0, 0, 0},
                new int[]{2, 5, 0, 0, 0, 7, 4, 8, 0},
                new int[]{0, 0, 1, 0, 0, 0, 0, 3, 0},
                new int[]{0, 7, 3, 0, 0, 0, 0, 0, 1},
                new int[]{0, 4, 0, 0, 0, 0, 0, 0, 0},
                new int[]{0, 0, 8, 6, 0, 0, 9, 0, 0},
                new int[]{9, 0, 0, 0, 0, 0, 0, 0, 0}};
        int[][] solved = {{6, 3, 9, 8, 4, 1, 2, 7, 5},
                {7, 2, 4, 9, 5, 3, 1, 6, 8},
                {1, 8, 5, 7, 2, 6, 3, 9, 4},
                {2, 5, 6, 1, 3, 7, 4, 8, 9},
                {4, 9, 1, 5, 8, 2, 6, 3, 7},
                {8, 7, 3, 4, 6, 9, 5, 2, 1},
                {5, 4, 2, 3, 9, 8, 7, 1, 6},
                {3, 1, 8, 6, 7, 5, 9, 4, 2},
                {9, 6, 7, 2, 1, 4, 8, 5, 3}};
        assertTrue(Arrays.deepEquals(solved, DiagonalSudoku.solve(unsolved)));
    }

    @Test
    public void random3() {
        int[][] unsolved = {
                {0, 0, 0, 0, 0, 0, 9, 0, 0},
                {0, 0, 0, 0, 0, 8, 0, 0, 6},
                {3, 0, 0, 9, 0, 0, 7, 2, 0},
                {0, 0, 6, 0, 0, 1, 0, 0, 0},
                {7, 0, 0, 3, 0, 0, 0, 8, 0},
                {0, 0, 0, 6, 0, 5, 0, 0, 0},
                {0, 0, 0, 0, 1, 0, 0, 0, 5},
                {0, 0, 0, 0, 0, 3, 8, 4, 0},
                {0, 0, 4, 0, 0, 0, 0, 6, 0}};

        int[][] solved = {
                {6, 8, 5, 2, 3, 7, 9, 1, 4},
                {2, 7, 9, 1, 4, 8, 5, 3, 6},
                {3, 4, 1, 9, 5, 6, 7, 2, 8},
                {4, 9, 6, 8, 7, 1, 2, 5, 3},
                {7, 5, 2, 3, 9, 4, 6, 8, 1},
                {8, 1, 3, 6, 2, 5, 4, 9, 7},
                {9, 6, 8, 4, 1, 2, 3, 7, 5},
                {1, 2, 7, 5, 6, 3, 8, 4, 9},
                {5, 3, 4, 7, 8, 9, 1, 6, 2}};
        assertTrue(Arrays.deepEquals(solved, DiagonalSudoku.solve(unsolved)));
    }

    @Test
    public void testNull() {
        assertNull(DiagonalSudoku.solve(null));
    }

    @Test
    public void testInvalidBoard() {
        assertThrows(IllegalArgumentException.class, () -> DiagonalSudoku.solve(new int[][]{{1}, {2}}));
    }

    @Test
    public void emptyBoard() {
        assertTrue(Arrays.deepEquals(new int[][]{}, DiagonalSudoku.solve(new int[][]{})));
    }

    @Test
    public void unsolvableBoard() {
        int[][] board = {
                {8, 6, 0, 0, 2, 0, 0, 0, 0},
                {0, 0, 0, 7, 0, 0, 0, 5, 9},
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 6, 0, 8, 0, 0},
                {0, 4, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 5, 3, 0, 0, 0, 0, 7},
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 2, 0, 0, 0, 0, 6, 0, 0},
                {0, 0, 7, 5, 0, 9, 0, 0, 0}
        };
        assertNull(DiagonalSudoku.solve(board));
    }

    @Test
    public void duplicatesInRow() {
        int[][] board = {
                {8, 6, 6, 0, 2, 0, 0, 0, 0},
                {0, 0, 0, 7, 0, 0, 0, 5, 9},
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 6, 0, 8, 0, 0},
                {0, 4, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 5, 3, 0, 0, 0, 0, 7},
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 2, 0, 0, 0, 0, 6, 0, 0},
                {0, 0, 7, 5, 0, 9, 0, 0, 0}
        };
        assertNull(DiagonalSudoku.solve(board));
    }

    @Test
    public void invalidRangeNumbersInBoard() {
        int[][] board = {
                {-8, 6, 0, 0, 2, 0, 0, 0, 0},
                {0, 0, 0, 7, 0, 0, 0, 5, 9},
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 6, 0, 8, 0, 0},
                {0, 4, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 5, 3, 0, 0, 0, 0, 7},
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 2, 0, 0, 0, 0, 6, 0, 0},
                {0, 0, 7, 5, 0, 9, 0, 0, 0}
        };
        assertThrows(IllegalArgumentException.class, () -> DiagonalSudoku.solve(board));
        int[][] board1 = {
                {10, 6, 0, 0, 2, 0, 0, 0, 0},
                {0, 0, 0, 7, 0, 0, 0, 5, 9},
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 6, 0, 8, 0, 0},
                {0, 4, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 5, 3, 0, 0, 0, 0, 7},
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 2, 0, 0, 0, 0, 6, 0, 0},
                {0, 0, 7, 5, 0, 9, 0, 0, 0}
        };
        assertThrows(IllegalArgumentException.class, () -> DiagonalSudoku.solve(board1));

    }

    @Test
    public void test16x16board() {
        // https://www.innoludic.com/puzzles/super_X_00061.pdf
        int[][] board16x16 = {
                {0, 0, 0, 0, 0, 14, 0, 12, 0, 0, 0, 0, 4, 2, 3, 0},
                {13, 0, 12, 7, 5, 3, 0, 0, 16, 0, 0, 10, 0, 6, 0, 0},
                {14, 8, 1, 3, 0, 0, 10, 6, 0, 0, 0, 0, 0, 0, 0, 13},
                {9, 0, 5, 0, 8, 0, 7, 4, 14, 13, 0, 0, 0, 0, 0, 0},
                {12, 7, 6, 4, 0, 8, 0, 0, 15, 0, 0, 14, 0, 0, 0, 10},
                {0, 0, 0, 10, 16, 5, 15, 0, 4, 0, 0, 0, 11, 0, 0, 7},
                {0, 0, 16, 9, 0, 4, 12, 11, 0, 0, 0, 8, 5, 14, 2, 0},
                {11, 0, 0, 15, 10, 0, 0, 0, 0, 16, 1, 0, 0, 12, 0, 4},
                {1, 0, 10, 0, 0, 6, 5, 0, 0, 0, 0, 16, 12, 0, 0, 14},
                {0, 15, 11, 14, 4, 0, 0, 0, 13, 3, 8, 0, 1, 10, 0, 0},
                {5, 0, 0, 13, 0, 0, 0, 1, 0, 9, 6, 15, 16, 0, 0, 0},
                {4, 0, 0, 0, 11, 0, 0, 13, 0, 0, 14, 0, 6, 15, 8, 2},
                {0, 0, 0, 0, 0, 0, 14, 15, 2, 10, 0, 13, 0, 7, 0, 6},
                {15, 0, 0, 0, 0, 0, 0, 0, 6, 8, 0, 0, 10, 13, 12, 11},
                {0, 0, 2, 0, 6, 0, 0, 8, 0, 0, 16, 5, 9, 3, 0, 1},
                {0, 12, 13, 6, 0, 0, 0, 0, 1, 0, 15, 0, 0, 0, 0, 0}
        };

        // https://www.innoludic.com/puzzles/super_X_00061_sol.pdf
        int[][] solvedBoard16x16 = {
                {10, 11, 15, 16, 13, 14, 1, 12, 8, 5, 7, 6, 4, 2, 3, 9},
                {13, 4, 12, 7, 5, 3, 11, 9, 16, 15, 2, 10, 14, 6, 1, 8},
                {14, 8, 1, 3, 2, 15, 10, 6, 9, 4, 12, 11, 7, 16, 5, 13},
                {9, 6, 5, 2, 8, 16, 7, 4, 14, 13, 3, 1, 15, 11, 10, 12},
                {12, 7, 6, 4, 9, 8, 13, 2, 15, 11, 5, 14, 3, 1, 16, 10},
                {2, 1, 14, 10, 16, 5, 15, 3, 4, 12, 13, 9, 11, 8, 6, 7},
                {3, 13, 16, 9, 1, 4, 12, 11, 7, 6, 10, 8, 5, 14, 2, 15},
                {11, 5, 8, 15, 10, 7, 6, 14, 3, 16, 1, 2, 13, 12, 9, 4},
                {1, 3, 10, 8, 15, 6, 5, 7, 11, 2, 4, 16, 12, 9, 13, 14},
                {6, 15, 11, 14, 4, 9, 2, 16, 13, 3, 8, 12, 1, 10, 7, 5},
                {5, 2, 7, 13, 14, 12, 8, 1, 10, 9, 6, 15, 16, 4, 11, 3},
                {4, 16, 9, 12, 11, 10, 3, 13, 5, 1, 14, 7, 6, 15, 8, 2},
                {16, 9, 3, 5, 12, 1, 14, 15, 2, 10, 11, 13, 8, 7, 4, 6},
                {15, 14, 4, 1, 7, 2, 16, 5, 6, 8, 9, 3, 10, 13, 12, 11},
                {7, 10, 2, 11, 6, 13, 4, 8, 12, 14, 16, 5, 9, 3, 15, 1},
                {8, 12, 13, 6, 3, 11, 9, 10, 1, 7, 15, 4, 2, 5, 14, 16}};

        assertTrue(Arrays.deepEquals(solvedBoard16x16, DiagonalSudoku.solve(board16x16)));

    }
}